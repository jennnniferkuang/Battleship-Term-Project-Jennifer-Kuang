class Ship():
    def __init__(self, image, width, cellWidth, cellHeight):
        self.image = Image.open(image)
        self.width = width
        self.height = 1
        self.imageWidth = self.width * cellHeight
        self.imageHeight = self.height * cellWidth
        self.gridShape = [[1] * self.width] * self.height
        self.leftCol = None
        self.topRow = None
    
    def drawShip(self, topY, leftX):
        self.image = self.image.resize((self.imageHeight, self.imageWidth)) # temp literal
        self.image = CMUImage(self.image)
        drawImage(self.image, leftX, topY)
    
    def rotateShip(self):
        self.gridShape = [[1] * self.height] * self.width
        self.imageHeight, self.imageWidth = self.imageWidth, self.imageHeight
        self.width, self.height = self.height, self.width
        # rotate function referenced from official Pillow documentation:
        # https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.rotate 
        self.image = self.image.rotate(90)

class Plane(Ship):
    def __init__(self, image, width, cellWidth, cellHeight):
        super().__init__(image, width, cellWidth, cellHeight)
        self.height = 3






# randomly generate a pixel location for each ship (temp)
    for ship in app.redShips:
        maxX = app.player2Board.left + app.player2Board.width - ship.pixelWidth
        maxY = app.player2Board.top + app.player2Board.height - ship.pixelHeight
        ship.pixelLeftX = random.randint(app.player2Board.left, maxX)
        ship.pixelTopY = random.randint(app.player2Board.top, maxY)

# get the closest row and col to the top left of the ship. Then, use the
        # ship's grid shape to increment row and col of the initial starting row
        # and col of board and set it to be the same as the ship's cell value
        firstRow, firstCol = pixelToRowCol(ship.pixelLeftX, ship.pixelTopY, board, True)
        for row in range(len(ship.gridShape)):
            for col in range(len(ship.gridShape[row])):
                board.board[firstRow + row][firstCol + col] = ship.gridShape[row][col]

- How to change app.width/height to screen width/height or let user choose
- check to make sure computer's selected ship locations do not overlap. (Change to row, col generation instead?)
- implement rotate ship
- draw states of ships/guess

def computerGuess(app):
    # generate a random guess if no active ship
    guessRow = random.randint(0, 9) # temp
    guessCol = random.randint(0, 9)
    while app.playerBoard.board[guessRow][guessCol][0] == 1:
        guessRow = random.randint(0, 9) # temp
        guessCol = random.randint(0, 9)
    app.playerBoard.board[guessRow][guessCol][0] = 1
    # check if all cells of ship are guessed. If so, add to set of hit ships
    checkForSunkShips(app, app.blueShips, app.playerSunkShips)
    app.playerTurn = True


    # if a ship is hit
    if app.playerBoard.board[guessRow][guessCol] == [1, 1]:
        if (app.prevHitX, app.prevHitY) == (None, None):
            app.initialHitX, app.initialHitY = (guessRow, guessCol)
            app.prevHitX, app.prevHitY = (guessRow, guessCol)
        else:
            app.prevHitX, app.prevHitY = (guessRow, guessCol)
    else:
        pass

app.initialHit = None
resetDirections(app)
app.direction
app.prevHit
app.initialHit
what if there are ships side by side check if ship in that shape is sunk
app.currHitShipShape
app.sunkShips1
app.sunkShips2

if (firstRow + row >= len(board.board) or firstCol + col >=
                    len(board.board[row])):
                    return False
                if board.board[firstRow + row][firstCol + col][1] == 1:
                    return False

for row in range(3):
                for col in range(3):
                    if board.board[selectedTopRow + row][selectedLeftCol + col][1] == 1:
                        pixelTopX, pixelLeftCol = rowColToPixel(selectedTopRow, selectedLeftCol, board)
                        found = True

            if found:
                drawRect(pixelLeftX, pixelTpixelTopY + board.cellWidth, 
                         pixelLeftCol + board.cellHeight, fill = 'None', 
                         border = 'green', borderWidth = 3)
            else:
                drawRect(pixelTopX, pixelLeftCol, pixelTopX + board.cellWidth, 
                         pixelLeftCol + board.cellHeight, fill = 'None', 
                         border = 'red', borderWidth = 3)

    app.moves += 1
    if len(app.directions) == 0:
        app.initialHit = None
        resetDirections(app)
    guessRow = None
    guessCol = None
    # if nothing has been hit yet
    if app.initialHit == None:
        # randomize guess until hit
        randomGuess(app, app.playerBoard)
    # once there is an active ship being attacked
    else:
        # check guess in each direction until hit in direction
        guessRow, guessCol = app.prevHit
        drow, dcol = app.directions[0]
        guessRow += drow
        guessCol += dcol
        # if not legal direction, go back and remove that direction and try the
        # next one
        print(app.initialHit, guessRow, guessCol, app.playerBoard.board[guessRow][guessCol][0])
        while not isLegalRowCol(guessRow, guessCol, app.playerBoard):
            if app.playerBoard.board[guessRow][guessCol][0] == 1 and len(app.directions) > 0:
                app.directions.pop(0)
                if len(app.directions) == 0:
                    break
                app.prevHit = app.initialHit
            guessRow -= drow
            guessCol -= dcol
            app.directions.pop(0)
            if len(app.directions) == 0:
                break
            drow, dcol = app.directions[0]
            guessRow += drow
            guessCol += dcol
        # legal direction, make the guess
        if len(app.directions) > 0 and app.playerBoard.board[guessRow][guessCol][0] == 0:
            app.playerBoard.board[guessRow][guessCol][0] = 1
        elif len(app.directions) == 0:
            randomGuess(app, app.playerBoard)
        # landed a hit
        if app.playerBoard.board[guessRow][guessCol] == [1, 1]:
            # if the last hit was the initial hit, set direction to that
            # direction and its opposite
            if app.initialHit == app.prevHit:
                if len(app.directions) == 3:
                    app.directions = [app.directions[0]] # edge case
                else:
                    app.directions = app.directions[0:2]
            app.prevHit = (guessRow, guessCol)
        # did not land a hit
        else:
            if len(app.directions) > 0:
                app.directions.pop(0)
            app.prevHit = app.initialHit
            if len(app.directions) == 0:
                app.initialHit = None
                resetDirections(app)
    if checkForSunkShips(app, app.blueShips, app.playerSunkShips, app.playerBoard):
        app.initialHit = None
        resetDirections(app)
    app.playerTurn = True
    app.message = 'YOUR TURN'


            else:
                board[row][col][0] = 1
                app.activePowerUps.pop(app.activePowerUps.index(self))
                app.message = 'POWER UP! Select a cell to reveal surrounding area status'